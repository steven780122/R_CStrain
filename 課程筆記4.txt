1. Factor
> c("Red", "Green", "Blue", "Blue", "Red")
[1] "Red"   "Green" "Blue"  "Blue"  "Red"  
> char_vec <- c("Red", "Green", "Blue", "Blue", "Red")
> class(char_vec)
[1] "character"
> rgb_factor <- factor(char_vec)
> class(rgb_factor)
[1] "factor"
> rgb_factor                    			>>  "有所謂Levels的資訊，間接帶了unique的資訊!"
[1] Red   Green Blue  Blue  Red  			>> 預設用字母順序
Levels: Blue Green Red
> summary(rgb_factor)
 Blue Green   Red 
    2     1     2 
> summary(char_vec)
   Length     Class      Mode 
        5 character character 


> rgb_factor <- factor(char_vec, levels = c("Red", "Green", "Blue"))
> rgb_factor
[1] Red   Green Blue  Blue  Red  
Levels: Red Green Blue                			>> 順序就相同了!!



2. 排序參數:order 
> speed_factor <- factor(c("Fast", "Moderate", "Slow", "Fast"), ordered = TRUE)
> speed_factor
[1] Fast     Moderate Slow     Fast    
Levels: Fast < Moderate < Slow
> class(speed_factor)
[1] "ordered" "factor" 

> speed_factor <- factor(c("Fast", "Moderate", "Slow", "Fast"), ordered = TRUE, levels = c("Slow", "Moderate", "Fast"))
> speed_factor
[1] Fast     Moderate Slow     Fast    
Levels: Slow < Moderate < Fast

3. 有了order(順序型的factor)，就能比較:
> rgb_factor[1] < rgb_factor[2]				>> 因為剛沒order
[1] NA
Warning message:
In Ops.factor(rgb_factor[1], rgb_factor[2]) :
  ‘<’ not meaningful for factors
> speed_factor[1] < speed_factor[2]
[1] FALSE


4. 以溫度比較一下:
> temperature_vector <- c("Cold", "Warm", "Hot", "Cold", "Hot")
> temperature_factor <- factor(temperature_vector, levels=c("Cold", "Warm", "Hot"))
> temperature_factor
[1] Cold Warm Hot  Cold Hot 
Levels: Cold Warm Hot
> temperature_factor <- factor(temperature_vector, ordered = TRUE, levels=c("Cold", "Warm", "Hot"))
> temperature_factor
[1] Cold Warm Hot  Cold Hot 
Levels: Cold < Warm < Hot
> temperature_factor <- factor(temperature_vector, ordered = TRUE)
> temperature_factor
[1] Cold Warm Hot  Cold Hot 
Levels: Cold < Hot < Warm


5. 納為啥還要用char呢? 所以
?data.frame::
stringsAsFactors				>> 預設為TRUE
logical: should character vectors be converted to factors? 
The ‘factory-fresh’ default is TRUE, 
but this can be changed by setting options(stringsAsFactors = FALSE).

> as.integer(speed_factor)
[1] 3 2 1 3
> speed_factor
[1] Fast     Moderate Slow     Fast    
Levels: Slow < Moderate < Fast

> temperature_factor
[1] Cold Warm Hot  Cold Hot 
Levels: Cold < Hot < Warm
> c(temperature_vector, "Freezing")
[1] "Cold"     "Warm"     "Hot"      "Cold"     "Hot"      "Freezing"

6.
> df <- data.frame(temp = temperature_vector)
> str(df)
'data.frame':	5 obs. of  1 variable:
 $ temp: Factor w/ 3 levels "Cold","Hot","Warm": 1 3 2 1 2
> View(df)
> rbind(df, c("Freezing"))
  temp
1 Cold
2 Warm
3  Hot
4 Cold
5  Hot
6 <NA>
Warning message:
In `[<-.factor`(`*tmp*`, ri, value = "Freezing") :
  invalid factor level, NA generated
> rbind(df, c("Hot"))
  temp
1 Cold
2 Warm
3  Hot
4 Cold
5  Hot
6  Hot

_______________________
矩陣:
一定先row再col
> matrix(nrow = 3, ncol = 2)
     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA
[3,]   NA   NA
> dim(matrix(nrow = 3, ncol = 2))
[1] 3 2

> matrix(1:6, nrow = 3, ncol = 2)
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6
> matrix(1:4, nrow = 3, ncol = 2)
     [,1] [,2]
[1,]    1    4
[2,]    2    1
[3,]    3    2
Warning message:
In matrix(1:4, nrow = 3, ncol = 2) :
  data length [4] is not a sub-multiple or multiple of the number of rows [3]
> matrix(1:8, nrow = 3, ncol = 2)
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6
Warning message:
In matrix(1:8, nrow = 3, ncol = 2) :
  data length [8] is not a sub-multiple or multiple of the number of rows [3]
> 

**  少給會幫你算
> matrix(1:8, ncol = 2)
     [,1] [,2]
[1,]    1    5
[2,]    2    6
[3,]    3    7
[4,]    4    8
> matrix(1:9, ncol = 2)
     [,1] [,2]
[1,]    1    6
[2,]    2    7
[3,]    3    8
[4,]    4    9
[5,]    5    1
Warning message:
In matrix(1:9, ncol = 2) :
  data length [9] is not a sub-multiple or multiple of the number of rows [5]

** 調整放數字的順序:
byrow
> matrix(1:8, ncol = 2, byrow = TRUE)
     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6
[4,]    7    8

**
輸出對應直
> matrix(1:8, ncol = 2)[,1]					>> 整個第1欄
[1] 1 2 3 4
> class(matrix(1:8, ncol = 2)[,1])
[1] "integer"
> matrix(1:8, ncol = 2)[,1]
[1] 1 2 3 4
> matrix(1:8, ncol = 2)[2,]
[1] 2 6
> matrix(1:8, ncol = 2)[2, 3]
Error in matrix(1:8, ncol = 2)[2, 3] : subscript out of bounds
> matrix(1:8, ncol = 2)[2, 1]
[1] 2


**矩陣邏輯塞選
> matrix(1:30, ncol = 5) < 10
     [,1]  [,2]  [,3]  [,4]  [,5]
[1,] TRUE  TRUE FALSE FALSE FALSE
[2,] TRUE  TRUE FALSE FALSE FALSE
[3,] TRUE  TRUE FALSE FALSE FALSE
[4,] TRUE FALSE FALSE FALSE FALSE
[5,] TRUE FALSE FALSE FALSE FALSE
[6,] TRUE FALSE FALSE FALSE FALSE
> matrix(1:30, ncol = 5)[matrix(1:30, ncol = 5) < 10]
[1] 1 2 3 4 5 6 7 8 9

or

> my_mat <- matrix(1:30, ncol = 5)
> my_mat[my_mat < 10]
[1] 1 2 3 4 5 6 7 8 9

** 聯集:
> my_mat < 10
     [,1]  [,2]  [,3]  [,4]  [,5]
[1,] TRUE  TRUE FALSE FALSE FALSE
[2,] TRUE  TRUE FALSE FALSE FALSE
[3,] TRUE  TRUE FALSE FALSE FALSE
[4,] TRUE FALSE FALSE FALSE FALSE
[5,] TRUE FALSE FALSE FALSE FALSE
[6,] TRUE FALSE FALSE FALSE FALSE
> my_mat > 20
      [,1]  [,2]  [,3]  [,4] [,5]
[1,] FALSE FALSE FALSE FALSE TRUE
[2,] FALSE FALSE FALSE FALSE TRUE
[3,] FALSE FALSE FALSE  TRUE TRUE
[4,] FALSE FALSE FALSE  TRUE TRUE
[5,] FALSE FALSE FALSE  TRUE TRUE
[6,] FALSE FALSE FALSE  TRUE TRUE
> my_mat[my_mat < 10 & my_mat > 20]
integer(0)
> my_mat[my_mat < 10 | my_mat > 20]					>> 拿小於10或大於20
 [1]  1  2  3  4  5  6  7  8  9 21 22 23 24 25 26 27 28 29 30

>>>>> 會發現拿出來也是vector: 因為它又不知道它拿出來的會應該是什麼結構，所以一為是很合理的!


但是若是可以不用破壞，是可以做到的:::   			>> 加個drop = FALSE!
> my_mat[, 1]
[1] 1 2 3 4 5 6
> my_mat[, 1, drop = FALSE]
     [,1]
[1,]    1
[2,]    2
[3,]    3
[4,]    4
[5,]    5
[6,]    6


**取出矩陣部分!
> my_mat[c(1, 4, 5), ]
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    7   13   19   25
[2,]    4   10   16   22   28
[3,]    5   11   17   23   29
> my_mat[1:3, ]
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    7   13   19   25
[2,]    2    8   14   20   26
[3,]    3    9   15   21   27
> my_mat[, 1:3]
     [,1] [,2] [,3]
[1,]    1    7   13
[2,]    2    8   14
[3,]    3    9   15
[4,]    4   10   16
[5,]    5   11   17
[6,]    6   12   18


** 要同一型態  只允許同一型別:
> matrix(c(1, 2, TRUE, FALSE), nrow = 2)
     [,1] [,2]
[1,]    1    1
[2,]    2    0
> matrix(c("1", "2", TRUE, FALSE), nrow = 2)
     [,1] [,2]   
[1,] "1"  "TRUE" 
[2,] "2"  "FALSE"

______________
矩陣直接元素乘法:
> mat_1 <- matrix(1:4, nrow = 2)
> mat_2 <- matrix(5:8, nrow = 2)
> mat_2
     [,1] [,2]
[1,]    5    7
[2,]    6    8
> mat_1
     [,1] [,2]
[1,]    1    3
[2,]    2    4
> mat_1 * mat_2
     [,1] [,2]
[1,]    5   21
[2,]   12   32


若高中所學的矩陣乘法寫法為:mat_1 %*% mat_2
> mat_1 %*% mat_2
     [,1] [,2]
[1,]   23   31
[2,]   34   46





